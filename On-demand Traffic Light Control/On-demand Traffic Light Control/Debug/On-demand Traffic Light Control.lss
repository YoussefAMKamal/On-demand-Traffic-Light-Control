
On-demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  00000c36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144a  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e9  00000000  00000000  00002226  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc1  00000000  00000000  00002b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000037d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000530  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b50  00000000  00000000  00003f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 36       	cpi	r26, 0x6F	; 111
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
  74:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_Init>:
uint8_t normalMode = LOW;

void APP_Init(void)
{
	// Initialization of cars leds
	LED_Init(LED_CAR, LED_GREEN);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_Init>
	LED_Init(LED_CAR, LED_YELLOW);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_Init>
	LED_Init(LED_CAR, LED_RED);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_Init>
	
	// Initialization of pedestrians leds
	LED_Init(LED_PEDESTRIANS, LED_GREEN);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_Init>
	LED_Init(LED_PEDESTRIANS, LED_YELLOW);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_Init>
	LED_Init(LED_PEDESTRIANS, LED_RED);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 4d 02 	call	0x49a	; 0x49a <LED_Init>
	
	// Initialization of the button
	BUTTON_Init(BUTTON_PORT, BUTTON_PIN);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 46 02 	call	0x48c	; 0x48c <BUTTON_Init>
	
	// Initialization of timer0
	Timer_Init();
  b4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Timer_Init>
	
	// Initialization of interrupt
	
		// Enable global interrupts - setting bit 7 in the status register to 1
		sei();
  b8:	78 94       	sei
	
		// Choose the external interrupt sense - sense on rising edge
		RISING_EDGE();
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	85 bf       	out	0x35, r24	; 53
	
		// Enable External interrupt 0 - INT0
		SETUP_INT0();
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
  c6:	08 95       	ret

000000c8 <__vector_1>:
		PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN(LOW);
	}
}

ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	normalMode  = HIGH;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN>:

void PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN(uint8_t isDown)
{
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	18 2f       	mov	r17, r24
	// Pedestrian's and  the cars' yellow leds will blink for 5 sec
	LED_OFF(LED_CAR, LED_GREEN);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	LED_ON(LED_PEDESTRIANS, LED_RED);
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	82 e4       	ldi	r24, 0x42	; 66
  fa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_ON>
	for(int i = 0;i < 20;i++)
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	0d c0       	rjmp	.+26     	; 0x11e <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN+0x38>
	{
		LED_Toggle(LED_CAR, LED_YELLOW);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LED_Toggle>
		LED_Toggle(LED_PEDESTRIANS, LED_YELLOW);
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	82 e4       	ldi	r24, 0x42	; 66
 110:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LED_Toggle>
		Timer_ON(250);
 114:	8a ef       	ldi	r24, 0xFA	; 250
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
void PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN(uint8_t isDown)
{
	// Pedestrian's and  the cars' yellow leds will blink for 5 sec
	LED_OFF(LED_CAR, LED_GREEN);
	LED_ON(LED_PEDESTRIANS, LED_RED);
	for(int i = 0;i < 20;i++)
 11c:	21 96       	adiw	r28, 0x01	; 1
 11e:	c4 31       	cpi	r28, 0x14	; 20
 120:	d1 05       	cpc	r29, r1
 122:	84 f3       	brlt	.-32     	; 0x104 <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN+0x1e>
		LED_Toggle(LED_PEDESTRIANS, LED_YELLOW);
		Timer_ON(250);
	}
			
	// Pedestrian's green led and  the cars' red led will be on for 5 sec
	LED_OFF(LED_CAR, LED_YELLOW);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	81 e4       	ldi	r24, 0x41	; 65
 128:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	LED_ON(LED_CAR, LED_RED);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_ON>
			
	LED_OFF(LED_PEDESTRIANS, LED_YELLOW);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	LED_ON(LED_PEDESTRIANS, LED_GREEN); // Pedestrian's can cross the road
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	82 e4       	ldi	r24, 0x42	; 66
 140:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_ON>
	LED_OFF(LED_PEDESTRIANS, LED_RED);
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	82 e4       	ldi	r24, 0x42	; 66
 148:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	Timer_ON(5000);
 14c:	88 e8       	ldi	r24, 0x88	; 136
 14e:	93 e1       	ldi	r25, 0x13	; 19
 150:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
			
	// Cars' red led will be off
	LED_OFF(LED_CAR, LED_RED);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	
	// Pedestrian's and  the cars' yellow leds will blink for 5 sec
	for(int i = 0;i < 20;i++)
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	0d c0       	rjmp	.+26     	; 0x17c <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN+0x96>
	{
		LED_Toggle(LED_CAR, LED_YELLOW);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LED_Toggle>
		LED_Toggle(LED_PEDESTRIANS, LED_YELLOW);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LED_Toggle>
		Timer_ON(250);
 172:	8a ef       	ldi	r24, 0xFA	; 250
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
			
	// Cars' red led will be off
	LED_OFF(LED_CAR, LED_RED);
	
	// Pedestrian's and  the cars' yellow leds will blink for 5 sec
	for(int i = 0;i < 20;i++)
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	c4 31       	cpi	r28, 0x14	; 20
 17e:	d1 05       	cpc	r29, r1
 180:	84 f3       	brlt	.-32     	; 0x162 <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN+0x7c>
		LED_Toggle(LED_CAR, LED_YELLOW);
		LED_Toggle(LED_PEDESTRIANS, LED_YELLOW);
		Timer_ON(250);
	}
	// Pedestrian green led will be off and both pedestrian red led and cars' green led will be on
	LED_OFF(LED_PEDESTRIANS, LED_GREEN);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	82 e4       	ldi	r24, 0x42	; 66
 186:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	LED_OFF(LED_PEDESTRIANS, LED_YELLOW);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	82 e4       	ldi	r24, 0x42	; 66
 18e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	LED_ON(LED_PEDESTRIANS, LED_RED);
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_ON>
	
	LED_ON(LED_CAR, LED_GREEN);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_ON>
	LED_OFF(LED_CAR, LED_YELLOW);
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	LED_OFF(LED_CAR, LED_RED);
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	Timer_ON(5000);
 1b2:	88 e8       	ldi	r24, 0x88	; 136
 1b4:	93 e1       	ldi	r25, 0x13	; 19
 1b6:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
	
	LED_OFF(LED_PEDESTRIANS, LED_RED);
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	82 e4       	ldi	r24, 0x42	; 66
 1be:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	LED_OFF(LED_CAR, LED_GREEN);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	
	// At first car's led was green of yellow
	if(isDown == HIGH)
 1ca:	11 30       	cpi	r17, 0x01	; 1
 1cc:	99 f4       	brne	.+38     	; 0x1f4 <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN+0x10e>
	{
		LED_OFF(LED_CAR, LED_RED);
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	81 e4       	ldi	r24, 0x41	; 65
 1d2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
		for(int i = 0;i < 20;i++)
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN+0x108>
		{
			LED_Toggle(LED_CAR, LED_YELLOW);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	81 e4       	ldi	r24, 0x41	; 65
 1e0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LED_Toggle>
			Timer_ON(250);
 1e4:	8a ef       	ldi	r24, 0xFA	; 250
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
	
	// At first car's led was green of yellow
	if(isDown == HIGH)
	{
		LED_OFF(LED_CAR, LED_RED);
		for(int i = 0;i < 20;i++)
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	c4 31       	cpi	r28, 0x14	; 20
 1f0:	d1 05       	cpc	r29, r1
 1f2:	a4 f3       	brlt	.-24     	; 0x1dc <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN+0xf6>
		{
			LED_Toggle(LED_CAR, LED_YELLOW);
			Timer_ON(250);
		}
	}
	normalMode = LOW;
 1f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	08 95       	ret

00000200 <PEDESTRIAN_FLAG_AT_RED>:

void PEDESTRIAN_FLAG_AT_RED(void)
{
	// Pedestrian's green led and  the cars' red led will be on for 5 sec
	LED_ON(LED_PEDESTRIANS, LED_GREEN); // Pedestrian's can cross the road
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	82 e4       	ldi	r24, 0x42	; 66
 204:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_ON>
	Timer_ON(5000);
 208:	88 e8       	ldi	r24, 0x88	; 136
 20a:	93 e1       	ldi	r25, 0x13	; 19
 20c:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
	LED_OFF(LED_PEDESTRIANS, LED_GREEN);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	normalMode = LOW;
 218:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 21c:	08 95       	ret

0000021e <APP_Start>:
		// Enable External interrupt 0 - INT0
		SETUP_INT0();
}

void APP_Start(void)
{
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
	// Car Green ON for 5 sec
	LED_ON(LED_CAR, LED_GREEN);
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	81 e4       	ldi	r24, 0x41	; 65
 226:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_ON>
	LED_OFF(LED_CAR, LED_YELLOW);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	for(int i = 0;i < 20;i++)
 232:	c0 e0       	ldi	r28, 0x00	; 0
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	0c c0       	rjmp	.+24     	; 0x250 <APP_Start+0x32>
	{
		Timer_ON(250);
 238:	8a ef       	ldi	r24, 0xFA	; 250
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
		if (normalMode == HIGH)
 240:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	19 f4       	brne	.+6      	; 0x24e <APP_Start+0x30>
		PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN(LOW);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 73 00 	call	0xe6	; 0xe6 <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN>
void APP_Start(void)
{
	// Car Green ON for 5 sec
	LED_ON(LED_CAR, LED_GREEN);
	LED_OFF(LED_CAR, LED_YELLOW);
	for(int i = 0;i < 20;i++)
 24e:	21 96       	adiw	r28, 0x01	; 1
 250:	c4 31       	cpi	r28, 0x14	; 20
 252:	d1 05       	cpc	r29, r1
 254:	8c f3       	brlt	.-30     	; 0x238 <APP_Start+0x1a>
		if (normalMode == HIGH)
		PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN(LOW);
	}

	// Car Yellow Toggle for 5 sec
	LED_OFF(LED_CAR, LED_GREEN);
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	81 e4       	ldi	r24, 0x41	; 65
 25a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	LED_OFF(LED_CAR, LED_RED);
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	for(int i = 0;i < 20;i++)
 266:	c0 e0       	ldi	r28, 0x00	; 0
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	0f c0       	rjmp	.+30     	; 0x28a <APP_Start+0x6c>
	{
		LED_Toggle(LED_CAR, LED_YELLOW);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	81 e4       	ldi	r24, 0x41	; 65
 270:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LED_Toggle>
		Timer_ON(250);
 274:	8a ef       	ldi	r24, 0xFA	; 250
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
		if (normalMode == HIGH)
 27c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	11 f4       	brne	.+4      	; 0x288 <APP_Start+0x6a>
			PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN(HIGH);
 284:	0e 94 73 00 	call	0xe6	; 0xe6 <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN>
	}

	// Car Yellow Toggle for 5 sec
	LED_OFF(LED_CAR, LED_GREEN);
	LED_OFF(LED_CAR, LED_RED);
	for(int i = 0;i < 20;i++)
 288:	21 96       	adiw	r28, 0x01	; 1
 28a:	c4 31       	cpi	r28, 0x14	; 20
 28c:	d1 05       	cpc	r29, r1
 28e:	74 f3       	brlt	.-36     	; 0x26c <APP_Start+0x4e>
		if (normalMode == HIGH)
			PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN(HIGH);
	}
		
	// Car Red ON for 5 sec
	LED_OFF(LED_CAR, LED_YELLOW);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	81 e4       	ldi	r24, 0x41	; 65
 294:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	LED_ON(LED_CAR, LED_RED);
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_ON>
	for(int i = 0;i < 20;i++)
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
 2a4:	0b c0       	rjmp	.+22     	; 0x2bc <APP_Start+0x9e>
	{
		Timer_ON(250);
 2a6:	8a ef       	ldi	r24, 0xFA	; 250
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
		if (normalMode == HIGH)
 2ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <APP_Start+0x9c>
		PEDESTRIAN_FLAG_AT_RED();
 2b6:	0e 94 00 01 	call	0x200	; 0x200 <PEDESTRIAN_FLAG_AT_RED>
	}
		
	// Car Red ON for 5 sec
	LED_OFF(LED_CAR, LED_YELLOW);
	LED_ON(LED_CAR, LED_RED);
	for(int i = 0;i < 20;i++)
 2ba:	21 96       	adiw	r28, 0x01	; 1
 2bc:	c4 31       	cpi	r28, 0x14	; 20
 2be:	d1 05       	cpc	r29, r1
 2c0:	94 f3       	brlt	.-28     	; 0x2a6 <APP_Start+0x88>
		if (normalMode == HIGH)
		PEDESTRIAN_FLAG_AT_RED();
	}
		
	// Car Yellow Toggle for 5 sec
	LED_OFF(LED_CAR, LED_RED);
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	81 e4       	ldi	r24, 0x41	; 65
 2c6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LED_OFF>
	for(int i = 0;i < 20;i++)
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	10 c0       	rjmp	.+32     	; 0x2f0 <APP_Start+0xd2>
	{
		LED_Toggle(LED_CAR, LED_YELLOW);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	81 e4       	ldi	r24, 0x41	; 65
 2d4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LED_Toggle>
		Timer_ON(250);
 2d8:	8a ef       	ldi	r24, 0xFA	; 250
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 80 01 	call	0x300	; 0x300 <Timer_ON>
		if (normalMode == HIGH)
 2e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	19 f4       	brne	.+6      	; 0x2ee <APP_Start+0xd0>
		PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN(LOW);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 73 00 	call	0xe6	; 0xe6 <PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN>
		PEDESTRIAN_FLAG_AT_RED();
	}
		
	// Car Yellow Toggle for 5 sec
	LED_OFF(LED_CAR, LED_RED);
	for(int i = 0;i < 20;i++)
 2ee:	21 96       	adiw	r28, 0x01	; 1
 2f0:	c4 31       	cpi	r28, 0x14	; 20
 2f2:	d1 05       	cpc	r29, r1
 2f4:	6c f3       	brlt	.-38     	; 0x2d0 <APP_Start+0xb2>
		LED_Toggle(LED_CAR, LED_YELLOW);
		Timer_ON(250);
		if (normalMode == HIGH)
		PEDESTRIAN_FLAG_AT_YELLOW_OR_GREEN(LOW);
	}
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <Timer_Init>:
double tickTime,maxDelay;

void Timer_Init(void)
{
		// Choose timer mode
		TIMER0_COUNTER = 0x00; // Normal mode
 2fc:	13 be       	out	0x33, r1	; 51
 2fe:	08 95       	ret

00000300 <Timer_ON>:
}

void Timer_ON(uint16_t mSec)
{
 300:	8f 92       	push	r8
 302:	9f 92       	push	r9
 304:	af 92       	push	r10
 306:	bf 92       	push	r11
 308:	cf 92       	push	r12
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	bc 01       	movw	r22, r24
			// Reset counter
			number_of_countes = 0;
 312:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <number_of_countes+0x1>
 316:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <number_of_countes>
			
			tickTime = 256.0/1000.0;		// 256ms/1000 = prescaler/FCPU = time needed for 1 tick
 31a:	8f e6       	ldi	r24, 0x6F	; 111
 31c:	92 e1       	ldi	r25, 0x12	; 18
 31e:	a3 e8       	ldi	r26, 0x83	; 131
 320:	be e3       	ldi	r27, 0x3E	; 62
 322:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <tickTime>
 326:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <tickTime+0x1>
 32a:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <tickTime+0x2>
 32e:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <tickTime+0x3>
			maxDelay = tickTime*pow(2,8);	// max delay time needed to make a timer of 256 ms
 332:	8f e6       	ldi	r24, 0x6F	; 111
 334:	92 e1       	ldi	r25, 0x12	; 18
 336:	a3 e8       	ldi	r26, 0x83	; 131
 338:	b2 e4       	ldi	r27, 0x42	; 66
 33a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <maxDelay>
 33e:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <maxDelay+0x1>
 342:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <maxDelay+0x2>
 346:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <maxDelay+0x3>
			
			// getting initial time and times of repetition
			if (maxDelay > mSec)
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__floatunsisf>
 352:	6b 01       	movw	r12, r22
 354:	7c 01       	movw	r14, r24
 356:	2f e6       	ldi	r18, 0x6F	; 111
 358:	32 e1       	ldi	r19, 0x12	; 18
 35a:	43 e8       	ldi	r20, 0x83	; 131
 35c:	52 e4       	ldi	r21, 0x42	; 66
 35e:	0e 94 46 04 	call	0x88c	; 0x88c <__cmpsf2>
 362:	88 23       	and	r24, r24
 364:	dc f4       	brge	.+54     	; 0x39c <Timer_ON+0x9c>
			{
				initialTime = (maxDelay - mSec)/tickTime;
 366:	a7 01       	movw	r20, r14
 368:	96 01       	movw	r18, r12
 36a:	6f e6       	ldi	r22, 0x6F	; 111
 36c:	72 e1       	ldi	r23, 0x12	; 18
 36e:	83 e8       	ldi	r24, 0x83	; 131
 370:	92 e4       	ldi	r25, 0x42	; 66
 372:	0e 94 c2 03 	call	0x784	; 0x784 <__subsf3>
 376:	2f e6       	ldi	r18, 0x6F	; 111
 378:	32 e1       	ldi	r19, 0x12	; 18
 37a:	43 e8       	ldi	r20, 0x83	; 131
 37c:	5e e3       	ldi	r21, 0x3E	; 62
 37e:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
 382:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixunssfsi>
 386:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <initialTime+0x1>
 38a:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <initialTime>
				number_of_flags = 1;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <number_of_flags+0x1>
 396:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <number_of_flags>
 39a:	4a c0       	rjmp	.+148    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			} 
			else if (maxDelay == mSec)
 39c:	2f e6       	ldi	r18, 0x6F	; 111
 39e:	32 e1       	ldi	r19, 0x12	; 18
 3a0:	43 e8       	ldi	r20, 0x83	; 131
 3a2:	52 e4       	ldi	r21, 0x42	; 66
 3a4:	c7 01       	movw	r24, r14
 3a6:	b6 01       	movw	r22, r12
 3a8:	0e 94 46 04 	call	0x88c	; 0x88c <__cmpsf2>
 3ac:	81 11       	cpse	r24, r1
 3ae:	0b c0       	rjmp	.+22     	; 0x3c6 <Timer_ON+0xc6>
			{
				initialTime = 0;
 3b0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <initialTime+0x1>
 3b4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <initialTime>
				number_of_flags = 1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <number_of_flags+0x1>
 3c0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <number_of_flags>
 3c4:	35 c0       	rjmp	.+106    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			}
			else
			{
				number_of_flags = ceil((double)mSec/maxDelay);
 3c6:	2f e6       	ldi	r18, 0x6F	; 111
 3c8:	32 e1       	ldi	r19, 0x12	; 18
 3ca:	43 e8       	ldi	r20, 0x83	; 131
 3cc:	52 e4       	ldi	r21, 0x42	; 66
 3ce:	c7 01       	movw	r24, r14
 3d0:	b6 01       	movw	r22, r12
 3d2:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
 3d6:	0e 94 2f 04 	call	0x85e	; 0x85e <ceil>
 3da:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixunssfsi>
 3de:	4b 01       	movw	r8, r22
 3e0:	5c 01       	movw	r10, r24
 3e2:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <number_of_flags+0x1>
 3e6:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <number_of_flags>
				initialTime = (1 << 8) - ((double)mSec/tickTime)/number_of_flags;
 3ea:	2f e6       	ldi	r18, 0x6F	; 111
 3ec:	32 e1       	ldi	r19, 0x12	; 18
 3ee:	43 e8       	ldi	r20, 0x83	; 131
 3f0:	5e e3       	ldi	r21, 0x3E	; 62
 3f2:	c7 01       	movw	r24, r14
 3f4:	b6 01       	movw	r22, r12
 3f6:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
 3fa:	6b 01       	movw	r12, r22
 3fc:	7c 01       	movw	r14, r24
 3fe:	b4 01       	movw	r22, r8
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__floatunsisf>
 408:	9b 01       	movw	r18, r22
 40a:	ac 01       	movw	r20, r24
 40c:	c7 01       	movw	r24, r14
 40e:	b6 01       	movw	r22, r12
 410:	0e 94 4b 04 	call	0x896	; 0x896 <__divsf3>
 414:	9b 01       	movw	r18, r22
 416:	ac 01       	movw	r20, r24
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	93 e4       	ldi	r25, 0x43	; 67
 420:	0e 94 c2 03 	call	0x784	; 0x784 <__subsf3>
 424:	0e 94 bd 04 	call	0x97a	; 0x97a <__fixunssfsi>
 428:	70 93 6a 00 	sts	0x006A, r23	; 0x80006a <initialTime+0x1>
 42c:	60 93 69 00 	sts	0x0069, r22	; 0x800069 <initialTime>
			}
			
			//setting initial value
			TIMER0_CONTROL = initialTime;
 430:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <initialTime>
 434:	82 bf       	out	0x32, r24	; 50
			SET_BIT(TIMER0_COUNTER,2);
 436:	83 b7       	in	r24, 0x33	; 51
 438:	84 60       	ori	r24, 0x04	; 4
 43a:	83 bf       	out	0x33, r24	; 51
			
			// Counting the flags
			while(number_of_countes < number_of_flags)
 43c:	12 c0       	rjmp	.+36     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			{
				// Timer start -> setting the clock source
				SET_BIT(TIMER_FLAG,0); // No prescaler
 43e:	88 b7       	in	r24, 0x38	; 56
 440:	81 60       	ori	r24, 0x01	; 1
 442:	88 bf       	out	0x38, r24	; 56
				// stop after one overflow -> 256 micro second
							
				// wait until the overflow flag to be set
				while (GET_BIT(TIMER_FLAG,0) == 0);
 444:	08 b6       	in	r0, 0x38	; 56
 446:	00 fe       	sbrs	r0, 0
 448:	fd cf       	rjmp	.-6      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
							
				// Clear the overflow flag
				SET_BIT(TIMER_FLAG,0);
 44a:	88 b7       	in	r24, 0x38	; 56
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	88 bf       	out	0x38, r24	; 56
				number_of_countes++;
 450:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <number_of_countes>
 454:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <number_of_countes+0x1>
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <number_of_countes+0x1>
 45e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <number_of_countes>
			//setting initial value
			TIMER0_CONTROL = initialTime;
			SET_BIT(TIMER0_COUNTER,2);
			
			// Counting the flags
			while(number_of_countes < number_of_flags)
 462:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <number_of_countes>
 466:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <number_of_countes+0x1>
 46a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <number_of_flags>
 46e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <number_of_flags+0x1>
 472:	28 17       	cp	r18, r24
 474:	39 07       	cpc	r19, r25
 476:	18 f3       	brcs	.-58     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
				// Clear the overflow flag
				SET_BIT(TIMER_FLAG,0);
				number_of_countes++;
			}
			// Timer stop
			TIMER0_COUNTER = 0x00;
 478:	13 be       	out	0x33, r1	; 51
}
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	bf 90       	pop	r11
 484:	af 90       	pop	r10
 486:	9f 90       	pop	r9
 488:	8f 90       	pop	r8
 48a:	08 95       	ret

0000048c <BUTTON_Init>:

#include "button.h"

// Initializing Button
void BUTTON_Init(uint8_t buttonPort, uint8_t buttonPin)
{
 48c:	98 2f       	mov	r25, r24
 48e:	86 2f       	mov	r24, r22
	DIO_Init(buttonPin, buttonPort, IN);
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	69 2f       	mov	r22, r25
 494:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_Init>
 498:	08 95       	ret

0000049a <LED_Init>:

#include "led.h"

// Initializing Led
void LED_Init(uint8_t ledPort, uint8_t ledPin) 
{
 49a:	98 2f       	mov	r25, r24
 49c:	86 2f       	mov	r24, r22
	DIO_Init(ledPin, ledPort, OUT);
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	69 2f       	mov	r22, r25
 4a2:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_Init>
 4a6:	08 95       	ret

000004a8 <LED_ON>:
}

// Turn Led On
void LED_ON(uint8_t ledPort, uint8_t ledPin)
{
 4a8:	98 2f       	mov	r25, r24
 4aa:	86 2f       	mov	r24, r22
	DIO_Write(ledPin, ledPort, HIGH);
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	69 2f       	mov	r22, r25
 4b0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_Write>
 4b4:	08 95       	ret

000004b6 <LED_OFF>:
}

// Turn Led Off
void LED_OFF(uint8_t ledPort, uint8_t ledPin)
{
 4b6:	98 2f       	mov	r25, r24
 4b8:	86 2f       	mov	r24, r22
	DIO_Write(ledPin, ledPort, LOW);
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	69 2f       	mov	r22, r25
 4be:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_Write>
 4c2:	08 95       	ret

000004c4 <LED_Toggle>:
}

// Toggling Led
void LED_Toggle(uint8_t ledPort, uint8_t ledPin)
{
 4c4:	98 2f       	mov	r25, r24
 4c6:	86 2f       	mov	r24, r22
	DIO_Toggle(ledPin, ledPort);
 4c8:	69 2f       	mov	r22, r25
 4ca:	0e 94 83 03 	call	0x706	; 0x706 <DIO_Toggle>
 4ce:	08 95       	ret

000004d0 <main>:
#include "Application/app.h"

int main(void)
{
    //Initializing Application
	APP_Init();
 4d0:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_Init>
	
    while (1) 
    {
		// Starting Application
		APP_Start();
 4d4:	0e 94 0f 01 	call	0x21e	; 0x21e <APP_Start>
 4d8:	fd cf       	rjmp	.-6      	; 0x4d4 <main+0x4>

000004da <DIO_Init>:
#include "DIO.h"

// function definitions
void DIO_Init(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch (portNumber)
 4da:	62 34       	cpi	r22, 0x42	; 66
 4dc:	59 f1       	breq	.+86     	; 0x534 <DIO_Init+0x5a>
 4de:	18 f4       	brcc	.+6      	; 0x4e6 <DIO_Init+0xc>
 4e0:	61 34       	cpi	r22, 0x41	; 65
 4e2:	41 f0       	breq	.+16     	; 0x4f4 <DIO_Init+0x1a>
 4e4:	08 95       	ret
 4e6:	63 34       	cpi	r22, 0x43	; 67
 4e8:	09 f4       	brne	.+2      	; 0x4ec <DIO_Init+0x12>
 4ea:	44 c0       	rjmp	.+136    	; 0x574 <DIO_Init+0x9a>
 4ec:	64 34       	cpi	r22, 0x44	; 68
 4ee:	09 f4       	brne	.+2      	; 0x4f2 <DIO_Init+0x18>
 4f0:	60 c0       	rjmp	.+192    	; 0x5b2 <DIO_Init+0xd8>
 4f2:	08 95       	ret
	{
		case PORT_A:
			if (direction == IN)
 4f4:	41 11       	cpse	r20, r1
 4f6:	0e c0       	rjmp	.+28     	; 0x514 <DIO_Init+0x3a>
			{
				// DDRA &= ~(1 << pinNumber); // Input -> clear bit
				CLEAR_BIT(DDRA, pinNumber);
 4f8:	4a b3       	in	r20, 0x1a	; 26
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	b9 01       	movw	r22, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_Init+0x2c>
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	8a 95       	dec	r24
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_Init+0x28>
 50a:	cb 01       	movw	r24, r22
 50c:	80 95       	com	r24
 50e:	84 23       	and	r24, r20
 510:	8a bb       	out	0x1a, r24	; 26
 512:	08 95       	ret
			}
			else if (direction == OUT)
 514:	41 30       	cpi	r20, 0x01	; 1
 516:	09 f0       	breq	.+2      	; 0x51a <DIO_Init+0x40>
 518:	6a c0       	rjmp	.+212    	; 0x5ee <DIO_Init+0x114>
			{
				// DDRA |= ~(1 << pinNumber); // Output -> clear bit
				SET_BIT(DDRA, pinNumber);
 51a:	4a b3       	in	r20, 0x1a	; 26
 51c:	21 e0       	ldi	r18, 0x01	; 1
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	b9 01       	movw	r22, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_Init+0x4e>
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	8a 95       	dec	r24
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_Init+0x4a>
 52c:	cb 01       	movw	r24, r22
 52e:	84 2b       	or	r24, r20
 530:	8a bb       	out	0x1a, r24	; 26
 532:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_B:
			if (direction == IN)
 534:	41 11       	cpse	r20, r1
 536:	0e c0       	rjmp	.+28     	; 0x554 <DIO_Init+0x7a>
			{
				// DDRB &= ~(1 << pinNumber); // Input -> clear bit
				CLEAR_BIT(DDRB, pinNumber);
 538:	47 b3       	in	r20, 0x17	; 23
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	b9 01       	movw	r22, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_Init+0x6c>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	8a 95       	dec	r24
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_Init+0x68>
 54a:	cb 01       	movw	r24, r22
 54c:	80 95       	com	r24
 54e:	84 23       	and	r24, r20
 550:	87 bb       	out	0x17, r24	; 23
 552:	08 95       	ret
			}
			else if (direction == OUT)
 554:	41 30       	cpi	r20, 0x01	; 1
 556:	09 f0       	breq	.+2      	; 0x55a <DIO_Init+0x80>
 558:	4a c0       	rjmp	.+148    	; 0x5ee <DIO_Init+0x114>
			{
				// DDRB |= ~(1 << pinNumber); // Output -> clear bit
				SET_BIT(DDRB, pinNumber);
 55a:	47 b3       	in	r20, 0x17	; 23
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	b9 01       	movw	r22, r18
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_Init+0x8e>
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	8a 95       	dec	r24
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_Init+0x8a>
 56c:	cb 01       	movw	r24, r22
 56e:	84 2b       	or	r24, r20
 570:	87 bb       	out	0x17, r24	; 23
 572:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_C:
			if (direction == IN)
 574:	41 11       	cpse	r20, r1
 576:	0e c0       	rjmp	.+28     	; 0x594 <DIO_Init+0xba>
			{
				// DDRC &= ~(1 << pinNumber); // Input -> clear bit
				CLEAR_BIT(DDRC, pinNumber);
 578:	44 b3       	in	r20, 0x14	; 20
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	b9 01       	movw	r22, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_Init+0xac>
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	8a 95       	dec	r24
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_Init+0xa8>
 58a:	cb 01       	movw	r24, r22
 58c:	80 95       	com	r24
 58e:	84 23       	and	r24, r20
 590:	84 bb       	out	0x14, r24	; 20
 592:	08 95       	ret
			}
			else if (direction == OUT)
 594:	41 30       	cpi	r20, 0x01	; 1
 596:	59 f5       	brne	.+86     	; 0x5ee <DIO_Init+0x114>
			{
				// DDRC |= ~(1 << pinNumber); // Output -> clear bit
				SET_BIT(DDRC, pinNumber);
 598:	44 b3       	in	r20, 0x14	; 20
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	b9 01       	movw	r22, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_Init+0xcc>
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	8a 95       	dec	r24
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_Init+0xc8>
 5aa:	cb 01       	movw	r24, r22
 5ac:	84 2b       	or	r24, r20
 5ae:	84 bb       	out	0x14, r24	; 20
 5b0:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_D:
			if (direction == IN)
 5b2:	41 11       	cpse	r20, r1
 5b4:	0e c0       	rjmp	.+28     	; 0x5d2 <DIO_Init+0xf8>
			{
				// DDRD &= ~(1 << pinNumber); // Input -> clear bit
				CLEAR_BIT(DDRD, pinNumber);
 5b6:	41 b3       	in	r20, 0x11	; 17
 5b8:	21 e0       	ldi	r18, 0x01	; 1
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	b9 01       	movw	r22, r18
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_Init+0xea>
 5c0:	66 0f       	add	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	8a 95       	dec	r24
 5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_Init+0xe6>
 5c8:	cb 01       	movw	r24, r22
 5ca:	80 95       	com	r24
 5cc:	84 23       	and	r24, r20
 5ce:	81 bb       	out	0x11, r24	; 17
 5d0:	08 95       	ret
			}
			else if (direction == OUT)
 5d2:	41 30       	cpi	r20, 0x01	; 1
 5d4:	61 f4       	brne	.+24     	; 0x5ee <DIO_Init+0x114>
			{
				// DDRD |= ~(1 << pinNumber); // Output -> clear bit
				SET_BIT(DDRD, pinNumber);
 5d6:	41 b3       	in	r20, 0x11	; 17
 5d8:	21 e0       	ldi	r18, 0x01	; 1
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	b9 01       	movw	r22, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_Init+0x10a>
 5e0:	66 0f       	add	r22, r22
 5e2:	77 1f       	adc	r23, r23
 5e4:	8a 95       	dec	r24
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_Init+0x106>
 5e8:	cb 01       	movw	r24, r22
 5ea:	84 2b       	or	r24, r20
 5ec:	81 bb       	out	0x11, r24	; 17
 5ee:	08 95       	ret

000005f0 <DIO_Write>:
	}
}

void DIO_Write(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch (portNumber)
 5f0:	62 34       	cpi	r22, 0x42	; 66
 5f2:	59 f1       	breq	.+86     	; 0x64a <DIO_Write+0x5a>
 5f4:	18 f4       	brcc	.+6      	; 0x5fc <DIO_Write+0xc>
 5f6:	61 34       	cpi	r22, 0x41	; 65
 5f8:	41 f0       	breq	.+16     	; 0x60a <DIO_Write+0x1a>
 5fa:	08 95       	ret
 5fc:	63 34       	cpi	r22, 0x43	; 67
 5fe:	09 f4       	brne	.+2      	; 0x602 <DIO_Write+0x12>
 600:	44 c0       	rjmp	.+136    	; 0x68a <DIO_Write+0x9a>
 602:	64 34       	cpi	r22, 0x44	; 68
 604:	09 f4       	brne	.+2      	; 0x608 <DIO_Write+0x18>
 606:	60 c0       	rjmp	.+192    	; 0x6c8 <DIO_Write+0xd8>
 608:	08 95       	ret
	{
		case PORT_A:
		if(value == LOW)
 60a:	41 11       	cpse	r20, r1
 60c:	0e c0       	rjmp	.+28     	; 0x62a <DIO_Write+0x3a>
		{
			// PORTA &= ~(1<<pinNumber); // write 0 -> clear bit
			CLEAR_BIT(PORTA, pinNumber);
 60e:	4b b3       	in	r20, 0x1b	; 27
 610:	21 e0       	ldi	r18, 0x01	; 1
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	b9 01       	movw	r22, r18
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_Write+0x2c>
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	8a 95       	dec	r24
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_Write+0x28>
 620:	cb 01       	movw	r24, r22
 622:	80 95       	com	r24
 624:	84 23       	and	r24, r20
 626:	8b bb       	out	0x1b, r24	; 27
 628:	08 95       	ret
		}
		else if (value == HIGH)
 62a:	41 30       	cpi	r20, 0x01	; 1
 62c:	09 f0       	breq	.+2      	; 0x630 <DIO_Write+0x40>
 62e:	6a c0       	rjmp	.+212    	; 0x704 <DIO_Write+0x114>
		{
			// PORTA |= (1<<pinNumber); // write 1 -> set bit
			SET_BIT(PORTA, pinNumber);
 630:	4b b3       	in	r20, 0x1b	; 27
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	b9 01       	movw	r22, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_Write+0x4e>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_Write+0x4a>
 642:	cb 01       	movw	r24, r22
 644:	84 2b       	or	r24, r20
 646:	8b bb       	out	0x1b, r24	; 27
 648:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_B:
		if(value == LOW)
 64a:	41 11       	cpse	r20, r1
 64c:	0e c0       	rjmp	.+28     	; 0x66a <DIO_Write+0x7a>
		{
			// PORTB &= ~(1<<pinNumber); // write 0 -> clear bit
			CLEAR_BIT(PORTB, pinNumber);
 64e:	48 b3       	in	r20, 0x18	; 24
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	b9 01       	movw	r22, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_Write+0x6c>
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	8a 95       	dec	r24
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_Write+0x68>
 660:	cb 01       	movw	r24, r22
 662:	80 95       	com	r24
 664:	84 23       	and	r24, r20
 666:	88 bb       	out	0x18, r24	; 24
 668:	08 95       	ret
		}
		else if (value == HIGH)
 66a:	41 30       	cpi	r20, 0x01	; 1
 66c:	09 f0       	breq	.+2      	; 0x670 <DIO_Write+0x80>
 66e:	4a c0       	rjmp	.+148    	; 0x704 <DIO_Write+0x114>
		{
			// PORTB |= (1<<pinNumber); // write 1 -> set bit
			SET_BIT(PORTB, pinNumber);
 670:	48 b3       	in	r20, 0x18	; 24
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	b9 01       	movw	r22, r18
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_Write+0x8e>
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	8a 95       	dec	r24
 680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_Write+0x8a>
 682:	cb 01       	movw	r24, r22
 684:	84 2b       	or	r24, r20
 686:	88 bb       	out	0x18, r24	; 24
 688:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_C:
		if(value == LOW)
 68a:	41 11       	cpse	r20, r1
 68c:	0e c0       	rjmp	.+28     	; 0x6aa <DIO_Write+0xba>
		{
			// PORTC &= ~(1<<pinNumber); // write 0 -> clear bit
			CLEAR_BIT(PORTC, pinNumber);
 68e:	45 b3       	in	r20, 0x15	; 21
 690:	21 e0       	ldi	r18, 0x01	; 1
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	b9 01       	movw	r22, r18
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_Write+0xac>
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	8a 95       	dec	r24
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_Write+0xa8>
 6a0:	cb 01       	movw	r24, r22
 6a2:	80 95       	com	r24
 6a4:	84 23       	and	r24, r20
 6a6:	85 bb       	out	0x15, r24	; 21
 6a8:	08 95       	ret
		}
		else if (value == HIGH)
 6aa:	41 30       	cpi	r20, 0x01	; 1
 6ac:	59 f5       	brne	.+86     	; 0x704 <DIO_Write+0x114>
		{
			// PORTC |= (1<<pinNumber); // write 1 -> set bit
			SET_BIT(PORTC, pinNumber);
 6ae:	45 b3       	in	r20, 0x15	; 21
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	b9 01       	movw	r22, r18
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_Write+0xcc>
 6b8:	66 0f       	add	r22, r22
 6ba:	77 1f       	adc	r23, r23
 6bc:	8a 95       	dec	r24
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_Write+0xc8>
 6c0:	cb 01       	movw	r24, r22
 6c2:	84 2b       	or	r24, r20
 6c4:	85 bb       	out	0x15, r24	; 21
 6c6:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_D:
		if(value == LOW)
 6c8:	41 11       	cpse	r20, r1
 6ca:	0e c0       	rjmp	.+28     	; 0x6e8 <DIO_Write+0xf8>
		{
			// PORTD &= ~(1<<pinNumber); // write 0 -> clear bit
			CLEAR_BIT(PORTD, pinNumber);
 6cc:	42 b3       	in	r20, 0x12	; 18
 6ce:	21 e0       	ldi	r18, 0x01	; 1
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	b9 01       	movw	r22, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_Write+0xea>
 6d6:	66 0f       	add	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	8a 95       	dec	r24
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_Write+0xe6>
 6de:	cb 01       	movw	r24, r22
 6e0:	80 95       	com	r24
 6e2:	84 23       	and	r24, r20
 6e4:	82 bb       	out	0x12, r24	; 18
 6e6:	08 95       	ret
		}
		else if (value == HIGH)
 6e8:	41 30       	cpi	r20, 0x01	; 1
 6ea:	61 f4       	brne	.+24     	; 0x704 <DIO_Write+0x114>
		{
			// PORTD |= (1<<pinNumber); // write 1 -> set bit
			SET_BIT(PORTD, pinNumber);
 6ec:	42 b3       	in	r20, 0x12	; 18
 6ee:	21 e0       	ldi	r18, 0x01	; 1
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	b9 01       	movw	r22, r18
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_Write+0x10a>
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	8a 95       	dec	r24
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_Write+0x106>
 6fe:	cb 01       	movw	r24, r22
 700:	84 2b       	or	r24, r20
 702:	82 bb       	out	0x12, r24	; 18
 704:	08 95       	ret

00000706 <DIO_Toggle>:
	}
}

void DIO_Toggle(uint8_t pinNumber, uint8_t portNumber)
{
	switch (portNumber)
 706:	62 34       	cpi	r22, 0x42	; 66
 708:	b1 f0       	breq	.+44     	; 0x736 <DIO_Toggle+0x30>
 70a:	18 f4       	brcc	.+6      	; 0x712 <DIO_Toggle+0xc>
 70c:	61 34       	cpi	r22, 0x41	; 65
 70e:	31 f0       	breq	.+12     	; 0x71c <DIO_Toggle+0x16>
 710:	08 95       	ret
 712:	63 34       	cpi	r22, 0x43	; 67
 714:	e9 f0       	breq	.+58     	; 0x750 <DIO_Toggle+0x4a>
 716:	64 34       	cpi	r22, 0x44	; 68
 718:	41 f1       	breq	.+80     	; 0x76a <DIO_Toggle+0x64>
 71a:	08 95       	ret
	{
		case PORT_A:
		// PORTA ^= (1<<pinNumber); // toggle bit
		TOGGEL_BIT(PORTA, pinNumber);
 71c:	4b b3       	in	r20, 0x1b	; 27
 71e:	21 e0       	ldi	r18, 0x01	; 1
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	b9 01       	movw	r22, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_Toggle+0x24>
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	8a 95       	dec	r24
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_Toggle+0x20>
 72e:	cb 01       	movw	r24, r22
 730:	84 27       	eor	r24, r20
 732:	8b bb       	out	0x1b, r24	; 27
		break;
 734:	08 95       	ret
		case PORT_B:
		// PORTB ^= (1<<pinNumber); // toggle bit
		TOGGEL_BIT(PORTB, pinNumber);
 736:	48 b3       	in	r20, 0x18	; 24
 738:	21 e0       	ldi	r18, 0x01	; 1
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	b9 01       	movw	r22, r18
 73e:	02 c0       	rjmp	.+4      	; 0x744 <DIO_Toggle+0x3e>
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	8a 95       	dec	r24
 746:	e2 f7       	brpl	.-8      	; 0x740 <DIO_Toggle+0x3a>
 748:	cb 01       	movw	r24, r22
 74a:	84 27       	eor	r24, r20
 74c:	88 bb       	out	0x18, r24	; 24
		break;
 74e:	08 95       	ret
		case PORT_C:
		// PORTC ^= (1<<pinNumber); // toggle bit
		TOGGEL_BIT(PORTC, pinNumber);
 750:	45 b3       	in	r20, 0x15	; 21
 752:	21 e0       	ldi	r18, 0x01	; 1
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	b9 01       	movw	r22, r18
 758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_Toggle+0x58>
 75a:	66 0f       	add	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	8a 95       	dec	r24
 760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_Toggle+0x54>
 762:	cb 01       	movw	r24, r22
 764:	84 27       	eor	r24, r20
 766:	85 bb       	out	0x15, r24	; 21
		break;
 768:	08 95       	ret
		case PORT_D:
		// PORTD ^= (1<<pinNumber); // toggle bit
		TOGGEL_BIT(PORTD, pinNumber);
 76a:	42 b3       	in	r20, 0x12	; 18
 76c:	21 e0       	ldi	r18, 0x01	; 1
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	b9 01       	movw	r22, r18
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_Toggle+0x72>
 774:	66 0f       	add	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	8a 95       	dec	r24
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_Toggle+0x6e>
 77c:	cb 01       	movw	r24, r22
 77e:	84 27       	eor	r24, r20
 780:	82 bb       	out	0x12, r24	; 18
 782:	08 95       	ret

00000784 <__subsf3>:
 784:	50 58       	subi	r21, 0x80	; 128

00000786 <__addsf3>:
 786:	bb 27       	eor	r27, r27
 788:	aa 27       	eor	r26, r26
 78a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__addsf3x>
 78e:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_round>
 792:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_pscA>
 796:	38 f0       	brcs	.+14     	; 0x7a6 <__addsf3+0x20>
 798:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_pscB>
 79c:	20 f0       	brcs	.+8      	; 0x7a6 <__addsf3+0x20>
 79e:	39 f4       	brne	.+14     	; 0x7ae <__addsf3+0x28>
 7a0:	9f 3f       	cpi	r25, 0xFF	; 255
 7a2:	19 f4       	brne	.+6      	; 0x7aa <__addsf3+0x24>
 7a4:	26 f4       	brtc	.+8      	; 0x7ae <__addsf3+0x28>
 7a6:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>
 7aa:	0e f4       	brtc	.+2      	; 0x7ae <__addsf3+0x28>
 7ac:	e0 95       	com	r30
 7ae:	e7 fb       	bst	r30, 7
 7b0:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>

000007b4 <__addsf3x>:
 7b4:	e9 2f       	mov	r30, r25
 7b6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_split3>
 7ba:	58 f3       	brcs	.-42     	; 0x792 <__addsf3+0xc>
 7bc:	ba 17       	cp	r27, r26
 7be:	62 07       	cpc	r22, r18
 7c0:	73 07       	cpc	r23, r19
 7c2:	84 07       	cpc	r24, r20
 7c4:	95 07       	cpc	r25, r21
 7c6:	20 f0       	brcs	.+8      	; 0x7d0 <__addsf3x+0x1c>
 7c8:	79 f4       	brne	.+30     	; 0x7e8 <__addsf3x+0x34>
 7ca:	a6 f5       	brtc	.+104    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7cc:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__fp_zero>
 7d0:	0e f4       	brtc	.+2      	; 0x7d4 <__addsf3x+0x20>
 7d2:	e0 95       	com	r30
 7d4:	0b 2e       	mov	r0, r27
 7d6:	ba 2f       	mov	r27, r26
 7d8:	a0 2d       	mov	r26, r0
 7da:	0b 01       	movw	r0, r22
 7dc:	b9 01       	movw	r22, r18
 7de:	90 01       	movw	r18, r0
 7e0:	0c 01       	movw	r0, r24
 7e2:	ca 01       	movw	r24, r20
 7e4:	a0 01       	movw	r20, r0
 7e6:	11 24       	eor	r1, r1
 7e8:	ff 27       	eor	r31, r31
 7ea:	59 1b       	sub	r21, r25
 7ec:	99 f0       	breq	.+38     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7ee:	59 3f       	cpi	r21, 0xF9	; 249
 7f0:	50 f4       	brcc	.+20     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f2:	50 3e       	cpi	r21, 0xE0	; 224
 7f4:	68 f1       	brcs	.+90     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 7f6:	1a 16       	cp	r1, r26
 7f8:	f0 40       	sbci	r31, 0x00	; 0
 7fa:	a2 2f       	mov	r26, r18
 7fc:	23 2f       	mov	r18, r19
 7fe:	34 2f       	mov	r19, r20
 800:	44 27       	eor	r20, r20
 802:	58 5f       	subi	r21, 0xF8	; 248
 804:	f3 cf       	rjmp	.-26     	; 0x7ec <__addsf3x+0x38>
 806:	46 95       	lsr	r20
 808:	37 95       	ror	r19
 80a:	27 95       	ror	r18
 80c:	a7 95       	ror	r26
 80e:	f0 40       	sbci	r31, 0x00	; 0
 810:	53 95       	inc	r21
 812:	c9 f7       	brne	.-14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 814:	7e f4       	brtc	.+30     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 816:	1f 16       	cp	r1, r31
 818:	ba 0b       	sbc	r27, r26
 81a:	62 0b       	sbc	r22, r18
 81c:	73 0b       	sbc	r23, r19
 81e:	84 0b       	sbc	r24, r20
 820:	ba f0       	brmi	.+46     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 822:	91 50       	subi	r25, 0x01	; 1
 824:	a1 f0       	breq	.+40     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 826:	ff 0f       	add	r31, r31
 828:	bb 1f       	adc	r27, r27
 82a:	66 1f       	adc	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	c2 f7       	brpl	.-16     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 832:	0e c0       	rjmp	.+28     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 834:	ba 0f       	add	r27, r26
 836:	62 1f       	adc	r22, r18
 838:	73 1f       	adc	r23, r19
 83a:	84 1f       	adc	r24, r20
 83c:	48 f4       	brcc	.+18     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 83e:	87 95       	ror	r24
 840:	77 95       	ror	r23
 842:	67 95       	ror	r22
 844:	b7 95       	ror	r27
 846:	f7 95       	ror	r31
 848:	9e 3f       	cpi	r25, 0xFE	; 254
 84a:	08 f0       	brcs	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84c:	b0 cf       	rjmp	.-160    	; 0x7ae <__addsf3+0x28>
 84e:	93 95       	inc	r25
 850:	88 0f       	add	r24, r24
 852:	08 f0       	brcs	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 854:	99 27       	eor	r25, r25
 856:	ee 0f       	add	r30, r30
 858:	97 95       	ror	r25
 85a:	87 95       	ror	r24
 85c:	08 95       	ret

0000085e <ceil>:
 85e:	0e 94 c0 05 	call	0xb80	; 0xb80 <__fp_trunc>
 862:	90 f0       	brcs	.+36     	; 0x888 <__stack+0x29>
 864:	9f 37       	cpi	r25, 0x7F	; 127
 866:	48 f4       	brcc	.+18     	; 0x87a <__stack+0x1b>
 868:	91 11       	cpse	r25, r1
 86a:	16 f4       	brtc	.+4      	; 0x870 <__stack+0x11>
 86c:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_szero>
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	80 e8       	ldi	r24, 0x80	; 128
 876:	9f e3       	ldi	r25, 0x3F	; 63
 878:	08 95       	ret
 87a:	26 f0       	brts	.+8      	; 0x884 <__stack+0x25>
 87c:	1b 16       	cp	r1, r27
 87e:	61 1d       	adc	r22, r1
 880:	71 1d       	adc	r23, r1
 882:	81 1d       	adc	r24, r1
 884:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__fp_mintl>
 888:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_mpack>

0000088c <__cmpsf2>:
 88c:	0e 94 29 05 	call	0xa52	; 0xa52 <__fp_cmp>
 890:	08 f4       	brcc	.+2      	; 0x894 <__cmpsf2+0x8>
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	08 95       	ret

00000896 <__divsf3>:
 896:	0e 94 5f 04 	call	0x8be	; 0x8be <__divsf3x>
 89a:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_round>
 89e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_pscB>
 8a2:	58 f0       	brcs	.+22     	; 0x8ba <__divsf3+0x24>
 8a4:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_pscA>
 8a8:	40 f0       	brcs	.+16     	; 0x8ba <__divsf3+0x24>
 8aa:	29 f4       	brne	.+10     	; 0x8b6 <__divsf3+0x20>
 8ac:	5f 3f       	cpi	r21, 0xFF	; 255
 8ae:	29 f0       	breq	.+10     	; 0x8ba <__divsf3+0x24>
 8b0:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>
 8b4:	51 11       	cpse	r21, r1
 8b6:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_szero>
 8ba:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_nan>

000008be <__divsf3x>:
 8be:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_split3>
 8c2:	68 f3       	brcs	.-38     	; 0x89e <__divsf3+0x8>

000008c4 <__divsf3_pse>:
 8c4:	99 23       	and	r25, r25
 8c6:	b1 f3       	breq	.-20     	; 0x8b4 <__divsf3+0x1e>
 8c8:	55 23       	and	r21, r21
 8ca:	91 f3       	breq	.-28     	; 0x8b0 <__divsf3+0x1a>
 8cc:	95 1b       	sub	r25, r21
 8ce:	55 0b       	sbc	r21, r21
 8d0:	bb 27       	eor	r27, r27
 8d2:	aa 27       	eor	r26, r26
 8d4:	62 17       	cp	r22, r18
 8d6:	73 07       	cpc	r23, r19
 8d8:	84 07       	cpc	r24, r20
 8da:	38 f0       	brcs	.+14     	; 0x8ea <__divsf3_pse+0x26>
 8dc:	9f 5f       	subi	r25, 0xFF	; 255
 8de:	5f 4f       	sbci	r21, 0xFF	; 255
 8e0:	22 0f       	add	r18, r18
 8e2:	33 1f       	adc	r19, r19
 8e4:	44 1f       	adc	r20, r20
 8e6:	aa 1f       	adc	r26, r26
 8e8:	a9 f3       	breq	.-22     	; 0x8d4 <__divsf3_pse+0x10>
 8ea:	35 d0       	rcall	.+106    	; 0x956 <__divsf3_pse+0x92>
 8ec:	0e 2e       	mov	r0, r30
 8ee:	3a f0       	brmi	.+14     	; 0x8fe <__divsf3_pse+0x3a>
 8f0:	e0 e8       	ldi	r30, 0x80	; 128
 8f2:	32 d0       	rcall	.+100    	; 0x958 <__divsf3_pse+0x94>
 8f4:	91 50       	subi	r25, 0x01	; 1
 8f6:	50 40       	sbci	r21, 0x00	; 0
 8f8:	e6 95       	lsr	r30
 8fa:	00 1c       	adc	r0, r0
 8fc:	ca f7       	brpl	.-14     	; 0x8f0 <__divsf3_pse+0x2c>
 8fe:	2b d0       	rcall	.+86     	; 0x956 <__divsf3_pse+0x92>
 900:	fe 2f       	mov	r31, r30
 902:	29 d0       	rcall	.+82     	; 0x956 <__divsf3_pse+0x92>
 904:	66 0f       	add	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	bb 1f       	adc	r27, r27
 90c:	26 17       	cp	r18, r22
 90e:	37 07       	cpc	r19, r23
 910:	48 07       	cpc	r20, r24
 912:	ab 07       	cpc	r26, r27
 914:	b0 e8       	ldi	r27, 0x80	; 128
 916:	09 f0       	breq	.+2      	; 0x91a <__divsf3_pse+0x56>
 918:	bb 0b       	sbc	r27, r27
 91a:	80 2d       	mov	r24, r0
 91c:	bf 01       	movw	r22, r30
 91e:	ff 27       	eor	r31, r31
 920:	93 58       	subi	r25, 0x83	; 131
 922:	5f 4f       	sbci	r21, 0xFF	; 255
 924:	3a f0       	brmi	.+14     	; 0x934 <__divsf3_pse+0x70>
 926:	9e 3f       	cpi	r25, 0xFE	; 254
 928:	51 05       	cpc	r21, r1
 92a:	78 f0       	brcs	.+30     	; 0x94a <__divsf3_pse+0x86>
 92c:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__fp_inf>
 930:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__fp_szero>
 934:	5f 3f       	cpi	r21, 0xFF	; 255
 936:	e4 f3       	brlt	.-8      	; 0x930 <__divsf3_pse+0x6c>
 938:	98 3e       	cpi	r25, 0xE8	; 232
 93a:	d4 f3       	brlt	.-12     	; 0x930 <__divsf3_pse+0x6c>
 93c:	86 95       	lsr	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b7 95       	ror	r27
 944:	f7 95       	ror	r31
 946:	9f 5f       	subi	r25, 0xFF	; 255
 948:	c9 f7       	brne	.-14     	; 0x93c <__divsf3_pse+0x78>
 94a:	88 0f       	add	r24, r24
 94c:	91 1d       	adc	r25, r1
 94e:	96 95       	lsr	r25
 950:	87 95       	ror	r24
 952:	97 f9       	bld	r25, 7
 954:	08 95       	ret
 956:	e1 e0       	ldi	r30, 0x01	; 1
 958:	66 0f       	add	r22, r22
 95a:	77 1f       	adc	r23, r23
 95c:	88 1f       	adc	r24, r24
 95e:	bb 1f       	adc	r27, r27
 960:	62 17       	cp	r22, r18
 962:	73 07       	cpc	r23, r19
 964:	84 07       	cpc	r24, r20
 966:	ba 07       	cpc	r27, r26
 968:	20 f0       	brcs	.+8      	; 0x972 <__divsf3_pse+0xae>
 96a:	62 1b       	sub	r22, r18
 96c:	73 0b       	sbc	r23, r19
 96e:	84 0b       	sbc	r24, r20
 970:	ba 0b       	sbc	r27, r26
 972:	ee 1f       	adc	r30, r30
 974:	88 f7       	brcc	.-30     	; 0x958 <__divsf3_pse+0x94>
 976:	e0 95       	com	r30
 978:	08 95       	ret

0000097a <__fixunssfsi>:
 97a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_splitA>
 97e:	88 f0       	brcs	.+34     	; 0x9a2 <__fixunssfsi+0x28>
 980:	9f 57       	subi	r25, 0x7F	; 127
 982:	98 f0       	brcs	.+38     	; 0x9aa <__fixunssfsi+0x30>
 984:	b9 2f       	mov	r27, r25
 986:	99 27       	eor	r25, r25
 988:	b7 51       	subi	r27, 0x17	; 23
 98a:	b0 f0       	brcs	.+44     	; 0x9b8 <__fixunssfsi+0x3e>
 98c:	e1 f0       	breq	.+56     	; 0x9c6 <__fixunssfsi+0x4c>
 98e:	66 0f       	add	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	1a f0       	brmi	.+6      	; 0x99e <__fixunssfsi+0x24>
 998:	ba 95       	dec	r27
 99a:	c9 f7       	brne	.-14     	; 0x98e <__fixunssfsi+0x14>
 99c:	14 c0       	rjmp	.+40     	; 0x9c6 <__fixunssfsi+0x4c>
 99e:	b1 30       	cpi	r27, 0x01	; 1
 9a0:	91 f0       	breq	.+36     	; 0x9c6 <__fixunssfsi+0x4c>
 9a2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_zero>
 9a6:	b1 e0       	ldi	r27, 0x01	; 1
 9a8:	08 95       	ret
 9aa:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__fp_zero>
 9ae:	67 2f       	mov	r22, r23
 9b0:	78 2f       	mov	r23, r24
 9b2:	88 27       	eor	r24, r24
 9b4:	b8 5f       	subi	r27, 0xF8	; 248
 9b6:	39 f0       	breq	.+14     	; 0x9c6 <__fixunssfsi+0x4c>
 9b8:	b9 3f       	cpi	r27, 0xF9	; 249
 9ba:	cc f3       	brlt	.-14     	; 0x9ae <__fixunssfsi+0x34>
 9bc:	86 95       	lsr	r24
 9be:	77 95       	ror	r23
 9c0:	67 95       	ror	r22
 9c2:	b3 95       	inc	r27
 9c4:	d9 f7       	brne	.-10     	; 0x9bc <__fixunssfsi+0x42>
 9c6:	3e f4       	brtc	.+14     	; 0x9d6 <__fixunssfsi+0x5c>
 9c8:	90 95       	com	r25
 9ca:	80 95       	com	r24
 9cc:	70 95       	com	r23
 9ce:	61 95       	neg	r22
 9d0:	7f 4f       	sbci	r23, 0xFF	; 255
 9d2:	8f 4f       	sbci	r24, 0xFF	; 255
 9d4:	9f 4f       	sbci	r25, 0xFF	; 255
 9d6:	08 95       	ret

000009d8 <__floatunsisf>:
 9d8:	e8 94       	clt
 9da:	09 c0       	rjmp	.+18     	; 0x9ee <__floatsisf+0x12>

000009dc <__floatsisf>:
 9dc:	97 fb       	bst	r25, 7
 9de:	3e f4       	brtc	.+14     	; 0x9ee <__floatsisf+0x12>
 9e0:	90 95       	com	r25
 9e2:	80 95       	com	r24
 9e4:	70 95       	com	r23
 9e6:	61 95       	neg	r22
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	8f 4f       	sbci	r24, 0xFF	; 255
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	99 23       	and	r25, r25
 9f0:	a9 f0       	breq	.+42     	; 0xa1c <__floatsisf+0x40>
 9f2:	f9 2f       	mov	r31, r25
 9f4:	96 e9       	ldi	r25, 0x96	; 150
 9f6:	bb 27       	eor	r27, r27
 9f8:	93 95       	inc	r25
 9fa:	f6 95       	lsr	r31
 9fc:	87 95       	ror	r24
 9fe:	77 95       	ror	r23
 a00:	67 95       	ror	r22
 a02:	b7 95       	ror	r27
 a04:	f1 11       	cpse	r31, r1
 a06:	f8 cf       	rjmp	.-16     	; 0x9f8 <__floatsisf+0x1c>
 a08:	fa f4       	brpl	.+62     	; 0xa48 <__floatsisf+0x6c>
 a0a:	bb 0f       	add	r27, r27
 a0c:	11 f4       	brne	.+4      	; 0xa12 <__floatsisf+0x36>
 a0e:	60 ff       	sbrs	r22, 0
 a10:	1b c0       	rjmp	.+54     	; 0xa48 <__floatsisf+0x6c>
 a12:	6f 5f       	subi	r22, 0xFF	; 255
 a14:	7f 4f       	sbci	r23, 0xFF	; 255
 a16:	8f 4f       	sbci	r24, 0xFF	; 255
 a18:	9f 4f       	sbci	r25, 0xFF	; 255
 a1a:	16 c0       	rjmp	.+44     	; 0xa48 <__floatsisf+0x6c>
 a1c:	88 23       	and	r24, r24
 a1e:	11 f0       	breq	.+4      	; 0xa24 <__floatsisf+0x48>
 a20:	96 e9       	ldi	r25, 0x96	; 150
 a22:	11 c0       	rjmp	.+34     	; 0xa46 <__floatsisf+0x6a>
 a24:	77 23       	and	r23, r23
 a26:	21 f0       	breq	.+8      	; 0xa30 <__floatsisf+0x54>
 a28:	9e e8       	ldi	r25, 0x8E	; 142
 a2a:	87 2f       	mov	r24, r23
 a2c:	76 2f       	mov	r23, r22
 a2e:	05 c0       	rjmp	.+10     	; 0xa3a <__floatsisf+0x5e>
 a30:	66 23       	and	r22, r22
 a32:	71 f0       	breq	.+28     	; 0xa50 <__floatsisf+0x74>
 a34:	96 e8       	ldi	r25, 0x86	; 134
 a36:	86 2f       	mov	r24, r22
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	60 e0       	ldi	r22, 0x00	; 0
 a3c:	2a f0       	brmi	.+10     	; 0xa48 <__floatsisf+0x6c>
 a3e:	9a 95       	dec	r25
 a40:	66 0f       	add	r22, r22
 a42:	77 1f       	adc	r23, r23
 a44:	88 1f       	adc	r24, r24
 a46:	da f7       	brpl	.-10     	; 0xa3e <__floatsisf+0x62>
 a48:	88 0f       	add	r24, r24
 a4a:	96 95       	lsr	r25
 a4c:	87 95       	ror	r24
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret

00000a52 <__fp_cmp>:
 a52:	99 0f       	add	r25, r25
 a54:	00 08       	sbc	r0, r0
 a56:	55 0f       	add	r21, r21
 a58:	aa 0b       	sbc	r26, r26
 a5a:	e0 e8       	ldi	r30, 0x80	; 128
 a5c:	fe ef       	ldi	r31, 0xFE	; 254
 a5e:	16 16       	cp	r1, r22
 a60:	17 06       	cpc	r1, r23
 a62:	e8 07       	cpc	r30, r24
 a64:	f9 07       	cpc	r31, r25
 a66:	c0 f0       	brcs	.+48     	; 0xa98 <__fp_cmp+0x46>
 a68:	12 16       	cp	r1, r18
 a6a:	13 06       	cpc	r1, r19
 a6c:	e4 07       	cpc	r30, r20
 a6e:	f5 07       	cpc	r31, r21
 a70:	98 f0       	brcs	.+38     	; 0xa98 <__fp_cmp+0x46>
 a72:	62 1b       	sub	r22, r18
 a74:	73 0b       	sbc	r23, r19
 a76:	84 0b       	sbc	r24, r20
 a78:	95 0b       	sbc	r25, r21
 a7a:	39 f4       	brne	.+14     	; 0xa8a <__fp_cmp+0x38>
 a7c:	0a 26       	eor	r0, r26
 a7e:	61 f0       	breq	.+24     	; 0xa98 <__fp_cmp+0x46>
 a80:	23 2b       	or	r18, r19
 a82:	24 2b       	or	r18, r20
 a84:	25 2b       	or	r18, r21
 a86:	21 f4       	brne	.+8      	; 0xa90 <__fp_cmp+0x3e>
 a88:	08 95       	ret
 a8a:	0a 26       	eor	r0, r26
 a8c:	09 f4       	brne	.+2      	; 0xa90 <__fp_cmp+0x3e>
 a8e:	a1 40       	sbci	r26, 0x01	; 1
 a90:	a6 95       	lsr	r26
 a92:	8f ef       	ldi	r24, 0xFF	; 255
 a94:	81 1d       	adc	r24, r1
 a96:	81 1d       	adc	r24, r1
 a98:	08 95       	ret

00000a9a <__fp_inf>:
 a9a:	97 f9       	bld	r25, 7
 a9c:	9f 67       	ori	r25, 0x7F	; 127
 a9e:	80 e8       	ldi	r24, 0x80	; 128
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	60 e0       	ldi	r22, 0x00	; 0
 aa4:	08 95       	ret

00000aa6 <__fp_mintl>:
 aa6:	88 23       	and	r24, r24
 aa8:	71 f4       	brne	.+28     	; 0xac6 <__fp_mintl+0x20>
 aaa:	77 23       	and	r23, r23
 aac:	21 f0       	breq	.+8      	; 0xab6 <__fp_mintl+0x10>
 aae:	98 50       	subi	r25, 0x08	; 8
 ab0:	87 2b       	or	r24, r23
 ab2:	76 2f       	mov	r23, r22
 ab4:	07 c0       	rjmp	.+14     	; 0xac4 <__fp_mintl+0x1e>
 ab6:	66 23       	and	r22, r22
 ab8:	11 f4       	brne	.+4      	; 0xabe <__fp_mintl+0x18>
 aba:	99 27       	eor	r25, r25
 abc:	0d c0       	rjmp	.+26     	; 0xad8 <__fp_mintl+0x32>
 abe:	90 51       	subi	r25, 0x10	; 16
 ac0:	86 2b       	or	r24, r22
 ac2:	70 e0       	ldi	r23, 0x00	; 0
 ac4:	60 e0       	ldi	r22, 0x00	; 0
 ac6:	2a f0       	brmi	.+10     	; 0xad2 <__fp_mintl+0x2c>
 ac8:	9a 95       	dec	r25
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	da f7       	brpl	.-10     	; 0xac8 <__fp_mintl+0x22>
 ad2:	88 0f       	add	r24, r24
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	97 f9       	bld	r25, 7
 ada:	08 95       	ret

00000adc <__fp_mpack>:
 adc:	9f 3f       	cpi	r25, 0xFF	; 255
 ade:	31 f0       	breq	.+12     	; 0xaec <__fp_mpack_finite+0xc>

00000ae0 <__fp_mpack_finite>:
 ae0:	91 50       	subi	r25, 0x01	; 1
 ae2:	20 f4       	brcc	.+8      	; 0xaec <__fp_mpack_finite+0xc>
 ae4:	87 95       	ror	r24
 ae6:	77 95       	ror	r23
 ae8:	67 95       	ror	r22
 aea:	b7 95       	ror	r27
 aec:	88 0f       	add	r24, r24
 aee:	91 1d       	adc	r25, r1
 af0:	96 95       	lsr	r25
 af2:	87 95       	ror	r24
 af4:	97 f9       	bld	r25, 7
 af6:	08 95       	ret

00000af8 <__fp_nan>:
 af8:	9f ef       	ldi	r25, 0xFF	; 255
 afa:	80 ec       	ldi	r24, 0xC0	; 192
 afc:	08 95       	ret

00000afe <__fp_pscA>:
 afe:	00 24       	eor	r0, r0
 b00:	0a 94       	dec	r0
 b02:	16 16       	cp	r1, r22
 b04:	17 06       	cpc	r1, r23
 b06:	18 06       	cpc	r1, r24
 b08:	09 06       	cpc	r0, r25
 b0a:	08 95       	ret

00000b0c <__fp_pscB>:
 b0c:	00 24       	eor	r0, r0
 b0e:	0a 94       	dec	r0
 b10:	12 16       	cp	r1, r18
 b12:	13 06       	cpc	r1, r19
 b14:	14 06       	cpc	r1, r20
 b16:	05 06       	cpc	r0, r21
 b18:	08 95       	ret

00000b1a <__fp_round>:
 b1a:	09 2e       	mov	r0, r25
 b1c:	03 94       	inc	r0
 b1e:	00 0c       	add	r0, r0
 b20:	11 f4       	brne	.+4      	; 0xb26 <__fp_round+0xc>
 b22:	88 23       	and	r24, r24
 b24:	52 f0       	brmi	.+20     	; 0xb3a <__fp_round+0x20>
 b26:	bb 0f       	add	r27, r27
 b28:	40 f4       	brcc	.+16     	; 0xb3a <__fp_round+0x20>
 b2a:	bf 2b       	or	r27, r31
 b2c:	11 f4       	brne	.+4      	; 0xb32 <__fp_round+0x18>
 b2e:	60 ff       	sbrs	r22, 0
 b30:	04 c0       	rjmp	.+8      	; 0xb3a <__fp_round+0x20>
 b32:	6f 5f       	subi	r22, 0xFF	; 255
 b34:	7f 4f       	sbci	r23, 0xFF	; 255
 b36:	8f 4f       	sbci	r24, 0xFF	; 255
 b38:	9f 4f       	sbci	r25, 0xFF	; 255
 b3a:	08 95       	ret

00000b3c <__fp_split3>:
 b3c:	57 fd       	sbrc	r21, 7
 b3e:	90 58       	subi	r25, 0x80	; 128
 b40:	44 0f       	add	r20, r20
 b42:	55 1f       	adc	r21, r21
 b44:	59 f0       	breq	.+22     	; 0xb5c <__fp_splitA+0x10>
 b46:	5f 3f       	cpi	r21, 0xFF	; 255
 b48:	71 f0       	breq	.+28     	; 0xb66 <__fp_splitA+0x1a>
 b4a:	47 95       	ror	r20

00000b4c <__fp_splitA>:
 b4c:	88 0f       	add	r24, r24
 b4e:	97 fb       	bst	r25, 7
 b50:	99 1f       	adc	r25, r25
 b52:	61 f0       	breq	.+24     	; 0xb6c <__fp_splitA+0x20>
 b54:	9f 3f       	cpi	r25, 0xFF	; 255
 b56:	79 f0       	breq	.+30     	; 0xb76 <__fp_splitA+0x2a>
 b58:	87 95       	ror	r24
 b5a:	08 95       	ret
 b5c:	12 16       	cp	r1, r18
 b5e:	13 06       	cpc	r1, r19
 b60:	14 06       	cpc	r1, r20
 b62:	55 1f       	adc	r21, r21
 b64:	f2 cf       	rjmp	.-28     	; 0xb4a <__fp_split3+0xe>
 b66:	46 95       	lsr	r20
 b68:	f1 df       	rcall	.-30     	; 0xb4c <__fp_splitA>
 b6a:	08 c0       	rjmp	.+16     	; 0xb7c <__fp_splitA+0x30>
 b6c:	16 16       	cp	r1, r22
 b6e:	17 06       	cpc	r1, r23
 b70:	18 06       	cpc	r1, r24
 b72:	99 1f       	adc	r25, r25
 b74:	f1 cf       	rjmp	.-30     	; 0xb58 <__fp_splitA+0xc>
 b76:	86 95       	lsr	r24
 b78:	71 05       	cpc	r23, r1
 b7a:	61 05       	cpc	r22, r1
 b7c:	08 94       	sec
 b7e:	08 95       	ret

00000b80 <__fp_trunc>:
 b80:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fp_splitA>
 b84:	a0 f0       	brcs	.+40     	; 0xbae <__fp_trunc+0x2e>
 b86:	be e7       	ldi	r27, 0x7E	; 126
 b88:	b9 17       	cp	r27, r25
 b8a:	88 f4       	brcc	.+34     	; 0xbae <__fp_trunc+0x2e>
 b8c:	bb 27       	eor	r27, r27
 b8e:	9f 38       	cpi	r25, 0x8F	; 143
 b90:	60 f4       	brcc	.+24     	; 0xbaa <__fp_trunc+0x2a>
 b92:	16 16       	cp	r1, r22
 b94:	b1 1d       	adc	r27, r1
 b96:	67 2f       	mov	r22, r23
 b98:	78 2f       	mov	r23, r24
 b9a:	88 27       	eor	r24, r24
 b9c:	98 5f       	subi	r25, 0xF8	; 248
 b9e:	f7 cf       	rjmp	.-18     	; 0xb8e <__fp_trunc+0xe>
 ba0:	86 95       	lsr	r24
 ba2:	77 95       	ror	r23
 ba4:	67 95       	ror	r22
 ba6:	b1 1d       	adc	r27, r1
 ba8:	93 95       	inc	r25
 baa:	96 39       	cpi	r25, 0x96	; 150
 bac:	c8 f3       	brcs	.-14     	; 0xba0 <__fp_trunc+0x20>
 bae:	08 95       	ret

00000bb0 <__fp_zero>:
 bb0:	e8 94       	clt

00000bb2 <__fp_szero>:
 bb2:	bb 27       	eor	r27, r27
 bb4:	66 27       	eor	r22, r22
 bb6:	77 27       	eor	r23, r23
 bb8:	cb 01       	movw	r24, r22
 bba:	97 f9       	bld	r25, 7
 bbc:	08 95       	ret

00000bbe <_exit>:
 bbe:	f8 94       	cli

00000bc0 <__stop_program>:
 bc0:	ff cf       	rjmp	.-2      	; 0xbc0 <__stop_program>
